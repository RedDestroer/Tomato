{
  // Place your web.app workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "typeScriptFunctionalComponent": {
    "prefix": "tsfcc",
    "scope": "typescript",
    "body": [
      "import React from 'react';",
      "import { makeStyles } from '@material-ui/core/styles';",
      "",
      "const useStyles = makeStyles({",
      "\troot: {},",
      "});",
      "",
      "interface Props {",
      "\tdata: string;",
      "}",
      "",
      "const ${1:${TM_FILENAME_BASE}}: React.FC<Props> = props => {",
      "\tconst classes = useStyles();",
      "\tconst { data } = props;",
      "",
      "\treturn (",
      "\t\t<div className={classes.root}>",
      "\t\t\t<span>{data}</span>",
      "\t\t</div>",
      "\t);",
      "};",
      "",
      "export default ${1:${TM_FILENAME_BASE}};",
      ""
    ],
    "description": "Creates a functional React component class with ES7 module system and TypeScript interfaces"
  }
}
